name: Release Workflow

on:
  workflow_dispatch:
    inputs:
        release_version:
            description: 'Version number for the release'
            required: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: linux, os: ubuntu-22.04 }
          - { name: macos, os: macos-12 }
          - { name: windows, os: windows-2022 }
    name: Build node on ${{ matrix.target.os }}
    runs-on: ${{ matrix.target.os }}
    env:
      RUSTFLAGS: -D warnings -Anon-snake-case
      RUST_BACKTRACE: 1

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rust-cache
          shared-key: release-${{ matrix.target.name }}
          cache-directories: |
            ${{ github.workspace }}/node
            ${{ github.workspace }}/masq
            ${{ github.workspace }}/masq_lib
            ${{ github.workspace }}/automap
            ${{ github.workspace }}/dns_utility

      - name: node build on ${{ matrix.target.os }}
        working-directory: ${{ github.workspace }}/node
        run: ./ci/build.sh
        shell: bash

      - name: masq build on ${{ matrix.target.os }}
        working-directory: ${{ github.workspace }}/masq
        run: ./ci/build.sh
        shell: bash

      - name: masq_lib build on ${{ matrix.target.os }}
        working-directory: ${{ github.workspace }}/masq_lib
        run: ./ci/build.sh
        shell: bash

      - name: automap build on ${{ matrix.target.os }}
        working-directory: ${{ github.workspace }}/automap
        run: ./ci/build.sh
        shell: bash

      - name: dns_utility build on ${{ matrix.target.os }}
        working-directory: ${{ github.workspace }}/dns_utility
        run: ./ci/build.sh
        shell: bash

      - name: Collect results
        working-directory: ${{ github.workspace }}
        run: ./ci/collect_results.sh
        shell: bash

      - name: Publish ${{ matrix.target.os }}
        uses: actions/upload-artifact@v3
        with:
          name: Node-${{ matrix.target.name }}
          path: results

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        GITHUB_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Prep env
        run: |
          git config --global user.email ${{ secrets.DEV_EMAIL }}
          git config --global user.name ${{ secrets.DEV_NAME }}
          gh auth setup-git

      - uses: actions/download-artifact@v3
        id: download

      - name: Display structure of downloaded files
        run: ls -R

      - name: Echo download path
        run: echo ${{steps.download.outputs.download-path}}

      - name: Deploy to S3 and invalidate CloudFront
        run: |
          aws s3 sync ${{ steps.download.outputs.download-path }} s3://${{ secrets.S3_BUCKET }}/MASQ-app/prod --acl private --follow-symlinks --delete --size-only
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION }} --paths '/MASQ-app/*'
          aws cloudfront create-invalidation --distribution-id ${{ secrets.OTA_DISTRIBUTION }} --paths '/*'

      - name: Zip artifacts
        run: |
          zip Node-windows.zip ./Node-windows/generated/bin/*
          zip Node-linux.zip ./Node-linux/generated/bin/*
          zip Node-macos.zip ./Node-macos/generated/bin/*

      - name: Create Release & Upload Artifacts
        run: |
          gh release create "v${{ inputs.release_version }}" --generate-notes --latest --title "v${{ inputs.release_version }}"
          gh release upload "v${{ inputs.release_version }}" Node-windows.zip Node-linux.zip Node-macos.zip

      - name: Sync release to S3 stable
        run: |
          aws s3 sync ${{ steps.download.outputs.download-path }} s3://${{ secrets.S3_BUCKET }}/stable --acl private --follow-symlinks --delete --size-only
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION }} --paths 'stable/*'

      - name: Sync release to S3 tagged
        run: |
          aws s3 sync ${{ steps.download.outputs.download-path }} s3://${{ env.S3_BUCKET }}/v${{ inputs.release_version }} --acl private --follow-symlinks --delete --size-only
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION }} --paths 'v${{ inputs.release_version }}/*'

      - name: Bump versions
        run: |
          ci/bump_version.sh ${{ inputs.release_version }}
          rm -rf Node-* *.zip
          git commit -a -m "Version release: ${{ inputs.release_version }}"
          git push
